BubbleSort is a inplace and stable algorithm which is suitale for small sets upto 100 or 150 elements 

inplace algorithm:
without using additional memory we can swap it.
stable algorithm:
How many times we have to sort same output will be occurred.

SourceCode:

import java.util.Scanner;
class BubbleSort
{
    public static void bubblesort(int arr[]) {
        int n = arr.length;
        for(int i=0; i<n-1; i++) {
            for(int j=0;j<n-1-i;j++) {
                if(arr[j] > arr[j+1]) {
                    int temp = arr[j];
                    arr[j] = arr[j+1];
                    arr[j+1] = temp;
                }
            }
        }
    }
    public static void printArray(int[] arr) {
        for(int val : arr)
            System.out.print(val+" ");
        System.out.println();
    }
    public static void main(String[] args)
    {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int arr[] = new int[n];
        for(int i=0;i<n;i++)
            arr[i] = sc.nextInt();
        printArray(arr);
        bubblesort(arr);
        printArray(arr);
        sc.close();
    }

optimalBubbleSort:
// Bubble short
import java.util.Scanner;
class BubbleSort
{
    public static void bubblesort(int[] arr) {
        int n = arr.length;
        boolean swapped;
        for(int i=0;i<n-1;i++){
            swapped = false;
            for(int j=0; j<n-1-i; j++){
                if(arr[j] > arr[j+1]) {
                    int temp = arr[j];
                    arr[j] = arr[j+1];
                    arr[j+1] = temp;
                    swapped = true;
                }
            }
            if(!swapped) break;
        }
    }
    public static void printArray(int[] arr) {
        for(int val : arr)
            System.out.print(val+" ");
        System.out.println();
    }
    public static void main(String[] args)
    {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int arr[] = new int[n];
        for(int i=0;i<n;i++)
            arr[i] = sc.nextInt();
        printArray(arr);
        bubblesort(arr);
        printArray(arr);
        sc.close();
    }
}


// InsertionSort:
insertionsort is a inplace and stable algorithm not suitable for largesets.

sourcecode:

import java.util.Scanner;
class Insertionsort{
    static void insertionsort(int [] arr){
        int n = arr.length;
        for(int i=1;i<n;i++)
        {
            int key=arr[i];
            int j=i-1;
            while(j>=0 && key<arr[j])
            {
                arr[j+1]=arr[j];
                j--;
            }
            arr[j+1] =key;
        }
    }
    public static void printArray(int [] arr){
        for(int val:arr)
           System.out.print(val+" ");
        System.out.println();   
    }
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int arr[] = new int[n];
        for(int i=0;i<n;i++)
            arr[i] = sc.nextInt();
        printArray(arr);
        insertionsort(arr);
        printArray(arr);
    }
}

Time Complexity:
BestCase: O(n)
AverageCase:O(n^2)
WorstCase:O(n^2)

Space Complexity:
O(1)

SelectionSort:
Selectionsort is a inplace and Unstable Algorithm suitable for small sets where timecomplexity does not matter.
Timecomplexity:
O(n^2)
SpaceComplexity :
O(1)

sourceCode:

import java.util.Scanner;
class SelectionSort {
    static void Selectionsort(int[] arr) {
        int n =arr.length;
        for(int i=0; i<n-1; i++) {
            int minIndx = i;
            for(int j = i+1;j<n;j++) {
                if(arr[j] < arr[minIndx])
                    minIndx = j;
            }
            int temp = arr[i];
            arr[i] = arr[minIndx];
            arr[minIndx] = temp;
        }
    }
    public static void printArray(int[] arr) {
    for(int val : arr)
        System.out.print(val+" ");
    System.out.println();
    }
    public static void main(String[] args)
    {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int arr[] = new int[n];
        for(int i=0;i<n;i++)
            arr[i] = sc.nextInt();
        printArray(arr);
        Selectionsort(arr);
        printArray(arr);
        sc.close();
    }
}


//dutch national flag
SourceCode:

class DutchNationalFlag
{
    static void SortColors(int[] nums)
    {
        int n = nums.length;
        int low=0 , mid=0 , high=n-1;
        while(mid<=high) {
            if(nums[mid]==0) {
                int temp = nums[low];
                nums[low] = nums[mid];
                nums[mid] = temp;
                low++;
                mid++;
            }
            else if(nums[mid]==1)
                mid++;
            else {
                int temp = nums[mid];
                nums[mid] = nums[high];
                nums[high] = temp;
                high--;
            }
        }
    }
    public static void main(String[] args)
    {
        int nums[] = {2,1,0,0,2,1,0 };
        SortColors(nums);
        for(int val : nums)
            System.out.print(val+" ");
    }
}

